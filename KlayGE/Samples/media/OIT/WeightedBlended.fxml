<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="NoOIT.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float2" name="near_far"/>>
	</cbuffer>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="accum_tex"/>
	<parameter type="texture2D" name="weight_tex"/>

	<shader>
		<![CDATA[
void WeightedBlendedRenderVS(float4 pos				: POSITION,
					float2 texcoord			: TEXCOORD0,
					float4 tangent_quat		: TANGENT,
					out float4 oL			: TEXCOORD0,
					out float4 oH			: TEXCOORD1,
					out float2 oDepth		: TEXCOORD2,
					out float4 oPos			: SV_Position)
{
	Transform(pos, texcoord, tangent_quat,
		oL, oH, oPos);

	oDepth = oPos.zw;
}

float CalcWeight(float alpha, float depth)
{
	return alpha * clamp(0.03f / (1e-5f + pow(depth / 200, 4.0f)), 0.01f, 3000);
}

void WeightedBlendedRenderPS(float4 L : TEXCOORD0, float4 H : TEXCOORD1, float2 depth : TEXCOORD2,
	out float4 rt0 : SV_Target0, out float4 rt1 : SV_Target1)
{
	float4 color = Shading(L, H);
	color.rgb *= color.a;

	float weight = CalcWeight(color.a, depth.x / depth.y);
	rt0 = float4(color.rgb * weight, color.a);
	rt1 = color.a * weight;
}

void WeightedBlendedBlitVS(uint vertex_id : SV_VertexID,
					out float2 oTex : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	float2 quad_texs[4] = { float2(0, 0), float2(1, 0), float2(0, 1), float2(1, 1) };
	oTex = quad_texs[vertex_id];

	oPos.xy = oTex * 2 - 1;
	oPos.y *= KLAYGE_FLIPPING;
	oPos.zw = float2(0, 1);
}

float4 WeightedBlendedBlitPS(float2 tex : TEXCOORD0) : SV_Target
{
	float4 accum = accum_tex.Sample(point_sampler, tex);
	if (accum.a == 1)
	{
		discard; 
	}

	float weight = weight_tex.Sample(point_sampler, tex).x;
	if (any(isinf(accum.rgb)))
	{
		accum.rgb = weight;
	}

	return float4(accum.rgb / max(weight, 1e-4f), accum.a);
}
		]]>
	</shader>

	<technique name="WeightedBlendedRender">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="cull_mode" value="none"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="zero"/>
			<state name="dest_blend_alpha" value="inv_src_alpha"/>

			<state name="vertex_shader" value="WeightedBlendedRenderVS()"/>
			<state name="pixel_shader" value="WeightedBlendedRenderPS()"/>
		</pass>
	</technique>

	<technique name="WeightedBlendedBlit">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="cull_mode" value="none"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="inv_src_alpha"/>
			<state name="dest_blend" value="src_alpha"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="inv_src_alpha"/>
			<state name="dest_blend_alpha" value="src_alpha"/>

			<state name="vertex_shader" value="WeightedBlendedBlitVS()"/>
			<state name="pixel_shader" value="WeightedBlendedBlitPS()"/>
		</pass>
	</technique>
</effect>
