<?xml version='1.0'?>

<effect>
	<parameter type="rw_byte_address_buffer" name="ras_order_buff"/>
	<parameter type="texture2D" name="color_map"/>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader version="5">
		<![CDATA[
void RasterizationOrderVS(float2 pos : POSITION,
			out float4 oPos : SV_Position)
{
	oPos = float4(pos, 0.5f, 1);
}

uint GetRasterizationOrder()
{
	uint old_value;
	ras_order_buff.InterlockedAdd(0, 1, old_value);
	return old_value;
}

float4 RasterizationOrderPS() : SV_Target
{
	uint order = GetRasterizationOrder();
	return float4((uint3(order >> uint3(0, 8, 16)) & 0xFF) / 255.0f, 1);
}

float4 RasterizationOrderColorMapPS() : SV_Target
{
	uint MAX_VALUE = 256 * 1024;
	uint order = GetRasterizationOrder();
	return color_map.SampleLevel(linear_sampler, float2((order & (MAX_VALUE - 1)) / float(MAX_VALUE), 0.5f), 0);
}
		]]>
	</shader>

	<technique name="RasterizationOrder">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="RasterizationOrderVS()"/>
			<state name="pixel_shader" value="RasterizationOrderPS()"/>
		</pass>
	</technique>
	<technique name="RasterizationOrderColorMap" inherit="RasterizationOrder">
		<pass name="p0">
			<state name="pixel_shader" value="RasterizationOrderColorMapPS()"/>
		</pass>
	</technique>
</effect>
