<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
			 
	<parameter type="float" name="point_radius"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="proj"/>
		<parameter type="float" name="far_plane"/>
	</cbuffer>

	<parameter type="float3" name="particle_color_from"/>
	<parameter type="float3" name="particle_color_to"/>
	<parameter type="texture2D" name="particle_alpha_from_tex"/>
	<parameter type="texture2D" name="particle_alpha_to_tex"/>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="texture2D" name="depth_tex"/>
	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
struct PS_IN
{
	float4 pos : SV_Position;
	float4 clr : COLOR0;
	float4 PosSS : TEXCOORD0;
	float4 CenterView : TEXCOORD1;
	float4 view_dir : TEXCOORD2;
	float3 tex : TEXCOORD3;
};

void ParticleVS(float4 pos : TEXCOORD0,
					float4 spin_size_lf_alpha : TEXCOORD1,
					float2 tex : POSITION,
					out PS_IN vs_out)
{
	float radius = point_radius * spin_size_lf_alpha.y * 2;

	vs_out.CenterView = mul(float4(pos.xyz, 1), model_view);
	float4 view_pos = vs_out.CenterView;
	float2 offset = tex * radius;
	float cz = cos(spin_size_lf_alpha.x);
	float sz = sin(spin_size_lf_alpha.x);
	view_pos.xy += float2(offset.x * cz - offset.y * sz, offset.x * sz + offset.y * cz);
	vs_out.pos = mul(view_pos, proj);
	vs_out.clr = float4(lerp(particle_color_from, particle_color_to, spin_size_lf_alpha.z), spin_size_lf_alpha.w);
	vs_out.PosSS = vs_out.pos;
	vs_out.view_dir.xyz = view_pos.xyz;
	vs_out.view_dir.w = radius;
	vs_out.tex = float3(float2(tex.x, -tex.y) / 2 + 0.5f, spin_size_lf_alpha.z);
}

float4 ParticlePS(PS_IN ps_in) : SV_Target
{
	ps_in.CenterView /= ps_in.CenterView.w;
	ps_in.view_dir.xyz = normalize(ps_in.view_dir.xyz);
	
	float4 clr = ps_in.clr;
	
	float v = dot(ps_in.CenterView.xyz, ps_in.view_dir.xyz);
	float disc = ps_in.view_dir.w * ps_in.view_dir.w - (dot(ps_in.CenterView.xyz, ps_in.CenterView.xyz) - v * v);
	if (disc < 0)
	{
		discard;
	}
	else
	{
		float2 tex_coord = ps_in.PosSS.xy / ps_in.PosSS.w;
		tex_coord.y *= KLAYGE_FLIPPING;
		tex_coord = tex_coord / 2 + 0.5f;

		float depth = ReadAFloat(depth_tex.Sample(point_sampler, tex_coord), far_plane);

		clr.a *= lerp(particle_alpha_from_tex.Sample(bilinear_sampler, ps_in.tex.xy).r,
						particle_alpha_to_tex.Sample(bilinear_sampler, ps_in.tex.xy).r,
						ps_in.tex.z);
		float intersect_z = (v - sqrt(disc)) * ps_in.view_dir.z;
		clr.a *= saturate((depth - intersect_z) * 5);
		clip(clr.a - 0.03f);
	}

	return clr;
}

void ParticleVDMPS(PS_IN ps_in,
		out float4 oColor : SV_Target0,
		out float4 oTransition : SV_Target1,
		out float4 oCount : SV_Target2)
{
	oColor = ParticlePS(ps_in);
	oTransition.x = ps_in.PosSS.w;
	oTransition.y = oTransition.x * oTransition.x;
	oTransition.zw = 1;
	oCount = 1;
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
void ParticleVS2(float4 pos : POSITION,
					float4 spin_size_lf_alpha : TEXCOORD0,
					out float4 oCenterView_Life : SV_Position,
					out float3 oSpinRadiusLF : TEXCOORD0,
					out float4 oColor : TEXCOORD1)
{
	oCenterView_Life = float4(mul(float4(pos.xyz, 1), model_view).xyz, pos.w);
	oSpinRadiusLF.x = spin_size_lf_alpha.x;
	oSpinRadiusLF.y = point_radius * spin_size_lf_alpha.y * 2;
	oSpinRadiusLF.z = spin_size_lf_alpha.z;
	oColor = float4(lerp(particle_color_from, particle_color_to, spin_size_lf_alpha.z), spin_size_lf_alpha.w);
}

[maxvertexcount(4)]
void ParticleGS(point float4 in_CenterView_Life[1] : SV_Position, point float3 in_spin_radius_lf[1] : TEXCOORD0,
	point float4 in_color[1] : TEXCOORD1, inout TriangleStream<PS_IN> out_stream)
{
	float4 CenterView_Life = in_CenterView_Life[0];
	float spin = in_spin_radius_lf[0].x;
	float radius = in_spin_radius_lf[0].y;
	
	PS_IN gs_out;
	
	float life_factor = in_spin_radius_lf[0].z;
	gs_out.CenterView = float4(CenterView_Life.xyz, 1);
	float cz = cos(spin);
	float sz = sin(spin);
	gs_out.clr = in_color[0];
	gs_out.view_dir.w = radius;

	for (int i = 0; i < 4; ++ i)
	{
		float2 tex;
		if (0 == i)
		{
			tex = float2(-1, 1);
		}
		else if (1 == i)
		{
			tex = float2(1, 1);
		}
		else if (2 == i)
		{
			tex = float2(-1, -1);
		}
		else 
		{
			tex = float2(1, -1);
		}
		
		float2 offset = tex * radius;
		float4 view_pos = gs_out.CenterView;
		view_pos.xy += float2(offset.x * cz - offset.y * sz, offset.x * sz + offset.y * cz);
		gs_out.pos = mul(view_pos, proj);
		gs_out.PosSS = gs_out.pos;
		gs_out.view_dir.xyz = view_pos.xyz;
		gs_out.tex = float3(float2(tex.x, -tex.y) / 2 + 0.5f, life_factor);

		out_stream.Append(gs_out);
	}
}
		]]>
	</shader>

	<technique name="Particle">
		<pass name="p0">
			<state name="depth_enable" value="true"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>

			<state name="vertex_shader" value="ParticleVS()"/>
			<state name="pixel_shader" value="ParticlePS()"/>
		</pass>
	</technique>

	<technique name="ParticleWithGS" inherit="Particle">
		<pass name="p0">
			<state name="vertex_shader" value="ParticleVS2()"/>
			<state name="geometry_shader" value="ParticleGS()"/>
		</pass>
	</technique>

	<technique name="ParticleVDM" inherit="Particle">
		<pass name="p0">
			<state name="pixel_shader" value="ParticleVDMPS()"/>
		</pass>
	</technique>

	<technique name="ParticleWithGSVDM" inherit="ParticleWithGS">
		<pass name="p0">
			<state name="pixel_shader" value="ParticleVDMPS()"/>
		</pass>
	</technique>
</effect>
