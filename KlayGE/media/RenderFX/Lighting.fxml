<?xml version='1.0'?>

<effect>
	<macro name="MAX_SHININESS" value="8192.0f"/>

	<shader>
		<![CDATA[
float DirectionalLighting(float3 light_dir, float3 normal)
{
	return dot(-light_dir, normal);
}

float PointLighting(float3 light_pos, float3 pos, float3 normal)
{
	return dot(normalize(light_pos - pos), normal);
}

float SpotLighting(float3 light_pos, float3 light_dir, float2 cos_cone, float3 pos)
{
	// cos_cone is (cos_outer_cone, cos_inner_cone)
	
	float3 v = normalize(pos - light_pos);
	float cos_direction = dot(v, light_dir);

	return smoothstep(cos_cone.x, cos_cone.y, cos_direction);
}


float3 FresnelTerm(float3 light_vec, float3 halfway_vec, float3 c_spec)
{
	float e_n = saturate(dot(light_vec, halfway_vec));
	return c_spec > 0 ? c_spec + (1 - c_spec) * exp2(-(5.55473f * e_n + 6.98316f) * e_n) : 0;
}

float SpecularNormalizeFactor(float shininess)
{
	return (shininess + 2) / 8;
}

float3 DistributionTerm(float3 halfway_vec, float3 normal, float shininess)
{
	return exp((shininess + 0.775f) * (max(dot(halfway_vec, normal), 0.0f) - 1));
}

float3 SpecularTerm(float3 c_spec, float3 light_vec, float3 halfway_vec, float3 normal, float shininess)
{
	return SpecularNormalizeFactor(shininess) * DistributionTerm(halfway_vec, normal, shininess)
		* FresnelTerm(light_vec, halfway_vec, c_spec);
}


// diffuse only
float3 CalcBRDFShading(float3 c_diff, float3 l, float3 n)
{
	return max(c_diff * dot(n, l), 0);
}
// diffuse + specular
float3 CalcBRDFShading(float3 c_diff, float3 c_spec, float shininess, float3 l, float3 h, float3 n)
{
	return max((c_diff + SpecularTerm(c_spec, l, h, n, shininess)) * dot(n, l), 0);
}


float AttenuationTerm(float3 light_pos, float3 pos, float3 atten)
{
	float3 v = light_pos - pos;
	float d2 = dot(v, v);
	float d = sqrt(d2);
	return 1 / dot(atten, float3(1, d, d2));
}

float3 CalcShading(float3 diff_lighting, float3 spec_lighting, float shininess,
				float3 diffuse, float3 specular, float3 view_dir, float3 normal)
{
	return float3(max(diff_lighting * diffuse
		+ SpecularNormalizeFactor(shininess) * spec_lighting
			* FresnelTerm(normalize(view_dir), normal, specular), 0));
}

float3 CalcShading(float4 lighting, float shininess, float3 diffuse, float3 specular,
				float3 view_dir, float3 normal)
{
	const float3 RGB_TO_LUM = float3(0.2126f, 0.7152f, 0.0722f);
	float3 diff_lighting = lighting.rgb;
	float3 spec_lighting = lighting.a / (dot(lighting.rgb, RGB_TO_LUM) + 1e-6f) * lighting.rgb;
	return CalcShading(diff_lighting, spec_lighting, shininess, diffuse, specular,
		view_dir, normal);
}


// Environment BRDF

float CalcPrefilteredEnvMip(float glossiness, int num_mip)
{
	return num_mip - glossiness * num_mip;
}

float3 CalcPrefilteredEnvVec(float3 normal, float3 view)
{
	return -reflect(view, normal);
}

float3 CalcEnvDiffuse(float3 prefiltered_env, float3 c_diff)
{
	return prefiltered_env * c_diff;
}

float3 CalcEnvSpecular(float3 prefiltered_env, float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float n_dot_v = saturate(dot(normal, view));
	float2 env_brdf;
	float4 tmp = ((float4(3.221071959f, -4.037492752f, 2.019851685f, -0.3509000242f) * glossiness
		+ float4(-5.483835697f, 4.748570442f, -2.599167109f, 0.8398050666f)) * glossiness
		+ float4(2.386495829f, 0.3970752358f, 0.1965616345f, -0.6608897448f)) * glossiness
		+ float4(-0.2426506728f, 0.05738930777f, 0.318114996f, 0.1741847545f);
	env_brdf.x = (((tmp.x * n_dot_v + tmp.y) * n_dot_v + tmp.z) * n_dot_v) + tmp.w;
	tmp = ((float4(-0.645807467f, 1.143745551f, -0.578012509f, 0.069540519f) * glossiness
		+ float4(0.895991894f, -1.581523545f, 0.81029122f, -0.108531864f)) * glossiness
		+ float4(-0.088478638f, 0.154233504f, -0.098784305f, 0.029798974f)) * glossiness
		+ float4(0.001030646f, 0.008038982f, -0.016316089f, 0.007532373f);
	env_brdf.y = (((tmp.x * n_dot_v + tmp.y) * n_dot_v + tmp.z) * n_dot_v) + tmp.w;
	env_brdf = saturate(env_brdf);
	return prefiltered_env * (c_spec * env_brdf.x + env_brdf.y);
}

// Area lighting

float AreaLightShininessFixup(float shininess, float3 light_pos, float light_radius, float3 point_pos)
{
	return shininess + light_radius / (2 * length(light_pos - point_pos));
}

float3 SphereAreaLightPositionFixup(float3 light_pos, float light_radius, float3 point_pos,
		float3 normal, float3 view_dir)
{
	float3 l = light_pos - point_pos;
	float3 r = reflect(view_dir, normal);
	float3 intersect_point = dot(l, r) * r;
	float3 center_to_ray = intersect_point - l;
	return light_pos + center_to_ray * saturate(light_radius / length(center_to_ray));
}

float3 TubeAreaLightPositionFixup(float3 l0, float3 l1, float3 point_pos, float3 normal, float3 view_dir)
{
	float3 ld = l1 - l0;
	float3 r = reflect(view_dir, normal);
	float r_dot_ld = dot(r, ld);
	float t = (dot(r, l0) * dot(r, ld) - dot(l0, ld)) / (dot(ld, ld) - r_dot_ld * r_dot_ld);
	return l0 + point_pos + saturate(t) * ld;
}

float2 TubeAreaLightAttenuationIrradianceFixup(float3 l0, float3 l1, float3 normal)
{
	float len_l0 = length(l0);
	float len_l1 = length(l1);
	return float2(1.0f / (len_l0 * len_l1 + dot(l0, l1)),
		dot(normal, l0) / len_l0 + dot(normal, l1) / len_l1);
}

// Metalness

float3 DiffuseColor(float3 albedo, float metalness)
{
	return albedo * (1 - metalness);
}

float3 SpecularColor(float3 albedo, float metalness)
{
	return lerp(0.04, albedo, metalness);
}

// Glossiness

float Shininess2Glossiness(float shininess)
{
	return log2(shininess) / log2(MAX_SHININESS);
}

float Glossiness2Shininess(float glossiness)
{
	return pow(MAX_SHININESS, glossiness);
}
		]]>
	</shader>
</effect>
