<?xml version='1.0'?>

<effect>
	<shader>
		<![CDATA[
void RenderToTextureVS(float2 pos : POSITION,
			out float2 oTexcoord : TEXCOORD0,
			out float4 oPosition : SV_Position)
{
	oPosition = float4(pos, 0.5f, 1);

	oTexcoord = pos / 2;
	oTexcoord.y *= KLAYGE_FLIPPING;
	oTexcoord += 0.5;
}

float4 RenderToTexturePS() : SV_Target0
{
	return 1;
}
		]]>
	</shader>
	
	<technique name="RenderToTexture">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="RenderToTextureVS()"/>
			<state name="pixel_shader" value="RenderToTexturePS()"/>
		</pass>
	</technique>


	<parameter type="texture2DMS" name="src_ms"/>

	<shader>
		<![CDATA[
float4 ResolveToTextureMSPS(float2 texcoord : TEXCOORD0) : SV_Target0
{
#if KLAYGE_EXPLICIT_MULTI_SAMPLE_SUPPORT
	uint width, height, samples;
	src_ms.GetDimensions(width, height, samples);

	int2 coord = texcoord * int2(width, height);
	float4 ret = 0;
	for (uint i = 0; i < samples; ++ i)
	{
		ret += src_ms.Load(coord, i);
	}
	ret /= samples;

	return ret;
#else
	return 0;
#endif
}
		]]>
	</shader>

	<technique name="ResolveToTextureMS">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="RenderToTextureVS()"/>
			<state name="pixel_shader" value="ResolveToTextureMSPS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 CopyToTextureMSPS(float2 texcoord : TEXCOORD0, uint sample_index : SV_SampleIndex) : SV_Target0
{
#if KLAYGE_EXPLICIT_MULTI_SAMPLE_SUPPORT
	uint width, height, samples;
	src_ms.GetDimensions(width, height, samples);
	int2 coord = texcoord * int2(width, height);
	return src_ms.Load(coord, sample_index);
#else
	return 0;
#endif
}
		]]>
	</shader>

	<technique name="CopyToTextureMS">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_enable" value="false"/>

			<state name="vertex_shader" value="RenderToTextureVS()"/>
			<state name="pixel_shader" value="CopyToTextureMSPS()"/>
		</pass>
	</technique>
</effect>
