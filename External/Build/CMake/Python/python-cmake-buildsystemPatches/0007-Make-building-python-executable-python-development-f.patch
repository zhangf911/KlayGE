From 83ab73e02bf5c2d4cdf7d189380532f7ae810ce8 Mon Sep 17 00:00:00 2001
From: Minmin Gong <gongminmin@msn.com>
Date: Tue, 23 Jan 2018 23:38:33 -0800
Subject: [PATCH 07/11] Make building python executable, python development,
 freeze importlib and pgen optional.

---
 CMakeLists.txt                 | 147 ++++++++++++++++++---------------
 cmake/libpython/CMakeLists.txt | 114 +++++++++++++------------
 2 files changed, 141 insertions(+), 120 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fe969d2..ac9fb7c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,6 +23,11 @@ if(APPLE)
   message(STATUS "${_msg} - ${MACOSX_DEPLOYMENT_TARGET}")
 endif()
 
+option(BUILD_PYTHON_EXECUTABLE "Build 'python' executable" ON)
+option(BUILD_PYTHON_DEVELOPMENT "Build files required to develop C extensions" ON)
+option(BUILD_FREEZE_IMPORTLIB "Build '_freeze_importlib' executable" ON)
+option(BUILD_PGEN "Build 'pgen' executable" ON)
+
 project(Python C)
 
 if(POLICY CMP0042)
@@ -38,7 +43,9 @@ include(cmake/CMakeChecks.cmake)
 include(cmake/Extensions.cmake)
 include(CMakeDependentOption)
 include(CMakeParseArguments)
-include(CTest)
+if(BUILD_PYTHON_EXECUTABLE)
+  include(CTest)
+endif()
 
 # Options
 option(DOWNLOAD_SOURCES "Automatically download the Python sources" ON)
@@ -465,77 +472,87 @@ add_subdirectory(cmake/extensions CMakeBuild/extensions)
 
 # Add the other subdirectories
 add_subdirectory(cmake/libpython CMakeBuild/libpython)
-add_subdirectory(cmake/python CMakeBuild/python)
-add_subdirectory(cmake/include CMakeBuild/include)
-add_subdirectory(cmake/lib CMakeBuild/lib)
+if(BUILD_PYTHON_EXECUTABLE)
+    add_subdirectory(cmake/python CMakeBuild/python)
+endif()
+if(BUILD_PYTHON_DEVELOPMENT)
+    add_subdirectory(cmake/include CMakeBuild/include)
+    add_subdirectory(cmake/lib CMakeBuild/lib)
+endif()
 if(BUILD_WININST)
     add_subdirectory(cmake/PC/bdist_wininst CMakeBuild/bdist_wininst)
 endif()
 
-# Add target to run "Argument Clinic" over all source files
-if(IS_PY3)
-add_custom_target(clinic
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/clinic/clinic.py --make
-    DEPENDS python
-    WORKING_DIRECTORY ${SRC_DIR}
-    COMMENT "Running 'Argument Clinic' over all source files"
-    VERBATIM
-)
+if(BUILD_PYTHON_EXECUTABLE)
+    # Add target to run "Argument Clinic" over all source files
+    if(IS_PY3)
+    add_custom_target(clinic
+        COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/clinic/clinic.py --make
+        DEPENDS python
+        WORKING_DIRECTORY ${SRC_DIR}
+        COMMENT "Running 'Argument Clinic' over all source files"
+        VERBATIM
+    )
+    endif()
 endif()
 
-# Add target to generate 'Include/graminit.h' and 'Python/graminit.c'
-add_custom_target(generate_graminit
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:pgen>
-        ${SRC_DIR}/Grammar/Grammar
-        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
-        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
-        ${SRC_DIR}/Include/graminit.h
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
-        ${SRC_DIR}/Python/graminit.c
-    DEPENDS pgen
-    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
-    COMMENT "Generating '${SRC_DIR}/Include/graminit.h' and '${SRC_DIR}/Python/graminit.c'."
-    VERBATIM
-)
-
-# Add target to generate 'opcode.h' header file
-add_custom_target(generate_opcode_h
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/scripts/generate_opcode_h.py
-        ${SRC_DIR}/Lib/opcode.py
-        ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-        ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
-        ${SRC_DIR}/Include/opcode.h
-    DEPENDS python
-    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
-    COMMENT "Generating '${SRC_DIR}/Include/opcode.h'."
-    VERBATIM
-)
-
-# Add target to generate 'Include/Python-ast.h' from 'Python.asdl'
-add_custom_target(generate_python_ast_h
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
-        -h ${SRC_DIR}/Include
-        ${SRC_DIR}/Parser/Python.asdl
-    DEPENDS python
-    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
-    COMMENT "Generating '${SRC_DIR}/Include/Python-ast.h'"
-    VERBATIM
-)
+if(BUILD_PGEN)
+    # Add target to generate 'Include/graminit.h' and 'Python/graminit.c'
+    add_custom_target(generate_graminit
+        COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:pgen>
+            ${SRC_DIR}/Grammar/Grammar
+            ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
+            ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
+        COMMAND ${CMAKE_COMMAND} -E copy_if_different
+            ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
+            ${SRC_DIR}/Include/graminit.h
+        COMMAND ${CMAKE_COMMAND} -E copy_if_different
+            ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
+            ${SRC_DIR}/Python/graminit.c
+        DEPENDS pgen
+        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+        COMMENT "Generating '${SRC_DIR}/Include/graminit.h' and '${SRC_DIR}/Python/graminit.c'."
+        VERBATIM
+    )
+endif()
 
-# Add target to generate 'Python/Python-ast.c' from 'Python.asdl'
-add_custom_target(generate_python_ast_c
-    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
-        -c ${SRC_DIR}/Python
-        ${SRC_DIR}/Parser/Python.asdl
-    DEPENDS python
-    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
-    COMMENT "Generating '${SRC_DIR}/Python/Python-ast.c'"
-    VERBATIM
-)
+if(BUILD_PYTHON_EXECUTABLE)
+    # Add target to generate 'opcode.h' header file
+    add_custom_target(generate_opcode_h
+        COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/scripts/generate_opcode_h.py
+            ${SRC_DIR}/Lib/opcode.py
+            ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
+        COMMAND ${CMAKE_COMMAND} -E copy_if_different
+            ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
+            ${SRC_DIR}/Include/opcode.h
+        DEPENDS python
+        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+        COMMENT "Generating '${SRC_DIR}/Include/opcode.h'."
+        VERBATIM
+    )
+    
+    # Add target to generate 'Include/Python-ast.h' from 'Python.asdl'
+    add_custom_target(generate_python_ast_h
+        COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
+            -h ${SRC_DIR}/Include
+            ${SRC_DIR}/Parser/Python.asdl
+        DEPENDS python
+        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+        COMMENT "Generating '${SRC_DIR}/Include/Python-ast.h'"
+        VERBATIM
+    )
+    
+    # Add target to generate 'Python/Python-ast.c' from 'Python.asdl'
+    add_custom_target(generate_python_ast_c
+        COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
+            -c ${SRC_DIR}/Python
+            ${SRC_DIR}/Parser/Python.asdl
+        DEPENDS python
+        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+        COMMENT "Generating '${SRC_DIR}/Python/Python-ast.c'"
+        VERBATIM
+    )
+endif()
 
 # If needed, copy 'asdl.py' and 'Python.asdl' into build directory so that 'test_asdl_parser' passes.
 set(_asdl_subdir ${LIBDIR})
diff --git a/cmake/libpython/CMakeLists.txt b/cmake/libpython/CMakeLists.txt
index 56970b1..e1ee1b5 100644
--- a/cmake/libpython/CMakeLists.txt
+++ b/cmake/libpython/CMakeLists.txt
@@ -394,66 +394,70 @@ if(WIN32 AND IS_PY3)
     endif()
 endif()
 
-set(LIBPYTHON_FROZEN_SOURCES )
-if(IS_PY3)
-
-# Build _freeze_importlib executable
-add_executable(_freeze_importlib
-  ${SRC_DIR}/Programs/_freeze_importlib.c
-  ${LIBPYTHON_OMIT_FROZEN_SOURCES}
-  )
-target_link_libraries(_freeze_importlib ${LIBPYTHON_TARGET_LIBRARIES})
-if(builtin_compile_definitions_without_py_limited_api)
-  target_compile_definitions(_freeze_importlib PUBLIC ${builtin_compile_definitions_without_py_limited_api})
-endif()
-
-# Freeze modules
-set(LIBPYTHON_FROZEN_SOURCES
-  ${SRC_DIR}/Python/importlib_external.h
-  ${SRC_DIR}/Python/importlib.h
-)
-add_custom_command(
-  OUTPUT ${LIBPYTHON_FROZEN_SOURCES}
-  COMMAND
-    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
-      ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+if(BUILD_FREEZE_IMPORTLIB)
+    set(LIBPYTHON_FROZEN_SOURCES )
+    if(IS_PY3)
+    
+    # Build _freeze_importlib executable
+    add_executable(_freeze_importlib
+      ${SRC_DIR}/Programs/_freeze_importlib.c
+      ${LIBPYTHON_OMIT_FROZEN_SOURCES}
+      )
+    target_link_libraries(_freeze_importlib ${LIBPYTHON_TARGET_LIBRARIES})
+    if(builtin_compile_definitions_without_py_limited_api)
+      target_compile_definitions(_freeze_importlib PUBLIC ${builtin_compile_definitions_without_py_limited_api})
+    endif()
+    
+    # Freeze modules
+    set(LIBPYTHON_FROZEN_SOURCES
       ${SRC_DIR}/Python/importlib_external.h
-  COMMAND
-    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
-      ${SRC_DIR}/Lib/importlib/_bootstrap.py
       ${SRC_DIR}/Python/importlib.h
-  DEPENDS
-    _freeze_importlib
-    ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
-    ${SRC_DIR}/Lib/importlib/_bootstrap.py
-)
-
-# This is a convenience target allowing to regenerate
-# the frozen sources.
-add_custom_target(freeze_modules DEPENDS ${LIBPYTHON_FROZEN_SOURCES})
+    )
+    add_custom_command(
+      OUTPUT ${LIBPYTHON_FROZEN_SOURCES}
+      COMMAND
+        ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+          ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+          ${SRC_DIR}/Python/importlib_external.h
+      COMMAND
+        ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+          ${SRC_DIR}/Lib/importlib/_bootstrap.py
+          ${SRC_DIR}/Python/importlib.h
+      DEPENDS
+        _freeze_importlib
+        ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+        ${SRC_DIR}/Lib/importlib/_bootstrap.py
+    )
+    
+    # This is a convenience target allowing to regenerate
+    # the frozen sources.
+    add_custom_target(freeze_modules DEPENDS ${LIBPYTHON_FROZEN_SOURCES})
 
+    endif()
 endif()
 
-# Build pgen executable
-set(PGEN2_SOURCES
-    ${SRC_DIR}/Parser/parsetok.c
-)
-set(PGEN3_SOURCES
-    ${SRC_DIR}/Python/dynamic_annotations.c
-    ${SRC_DIR}/Parser/parsetok_pgen.c
-)
-add_executable(pgen
-    ${PARSER_COMMON_SOURCES}
-    ${PGEN${PY_VERSION_MAJOR}_SOURCES}
-    ${SRC_DIR}/Objects/obmalloc.c
-    ${SRC_DIR}/Python/mysnprintf.c
-    ${SRC_DIR}/Python/pyctype.c
-    ${SRC_DIR}/Parser/tokenizer_pgen.c
-    ${SRC_DIR}/Parser/printgrammar.c
-    ${SRC_DIR}/Parser/pgenmain.c
-)
-if(builtin_compile_definitions_without_py_limited_api)
-  target_compile_definitions(pgen PUBLIC ${builtin_compile_definitions_without_py_limited_api})
+if(BUILD_PGEN)
+    # Build pgen executable
+    set(PGEN2_SOURCES
+        ${SRC_DIR}/Parser/parsetok.c
+    )
+    set(PGEN3_SOURCES
+        ${SRC_DIR}/Python/dynamic_annotations.c
+        ${SRC_DIR}/Parser/parsetok_pgen.c
+    )
+    add_executable(pgen
+        ${PARSER_COMMON_SOURCES}
+        ${PGEN${PY_VERSION_MAJOR}_SOURCES}
+        ${SRC_DIR}/Objects/obmalloc.c
+        ${SRC_DIR}/Python/mysnprintf.c
+        ${SRC_DIR}/Python/pyctype.c
+        ${SRC_DIR}/Parser/tokenizer_pgen.c
+        ${SRC_DIR}/Parser/printgrammar.c
+        ${SRC_DIR}/Parser/pgenmain.c
+    )
+    if(builtin_compile_definitions_without_py_limited_api)
+      target_compile_definitions(pgen PUBLIC ${builtin_compile_definitions_without_py_limited_api})
+    endif()
 endif()
 
 # Collect libpython sources
-- 
2.17.1.windows.2

