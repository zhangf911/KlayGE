SET(PY_VERSION_MAJOR 3)
SET(PY_VERSION_MINOR 8)
SET(PY_VERSION_PATCH 1)
SET(PY_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}.${PY_VERSION_PATCH}")

SET(PYTHON_PROJECT_DIR "${EXTERNAL_PROJECT_DIR}/Python")
SET(PYTHON_OUTPUT_DIR "${EXTERNAL_PROJECT_DIR}/lib/Python/${KLAYGE_PLATFORM_NAME}")

UpdateExternalLib("Python" "https://github.com/python/cpython.git" "1b293b60067f6f4a95984d064ce0f6b6d34c1216" "v${PY_VERSION}" "v${PY_VERSION}rc1" need_patch)
if(need_patch)
	foreach(patch "0001-bpo-40653-Move-_dirnameW-out-of-ifdef-HAVE_SYMLINK-e" "0002-bpo-40650-Include-winsock2.h-in-pytime.c-instead-of-" "0003-bpo-35890-Use-RegQueryInfoKeyW-and-CryptAcquireConte"
		"0004-bpo-40677-Define-IO_REPARSE_TAG_APPEXECLINK-explicit" "0005-Fix-for-clang-cl" "0006-Fix-for-MinGW" "0007-Fix-for-UWP")
		ApplyPatch("Python" "${CMAKE_CURRENT_SOURCE_DIR}/PythonPatches/${patch}.patch")
	endforeach()
endif()

UpdateExternalLib("python-cmake-buildsystem" "https://github.com/python-cmake-buildsystem/python-cmake-buildsystem" "a1ce7c2cf346ce62648d8c3e9e5cae7f655d4309" "" "" need_patch)
if(need_patch)
	foreach(patch "0001-Enable-ASM-langage-only-if-required" "0002-Fix-android-build-by-linking-against-libutil-only-if"
		"0003-Fix-build-error-when-curses-is-enabled-but-curses-he" "0004-Fix-android-build-error-specifying-multiprocessing-e"
		"0005-Fix-android-build-error-specifying-audiodev-extensio" "0006-Don-t-set_target_properties-on-an-extension-when-it-"
		"0007-Make-building-python-executable-python-development-f" "0008-Fix-some-problems-with-Android-and-iOS"
		"0009-Update-pyconfig.h-for-mingw" "0010-Adapt-to-python-3.7" "0011-Adapt-to-python-3.8")
		ApplyPatch("python-cmake-buildsystem" "${CMAKE_CURRENT_SOURCE_DIR}/python-cmake-buildsystemPatches/${patch}.patch")
	endforeach()
endif()

SET(SRC_DIR ${PYTHON_PROJECT_DIR})

FOREACH(flag_var
		CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
	IF(KLAYGE_COMPILER_MSVC)
		SET(${flag_var} "${${flag_var}} /wd4273 /wd4013 /wd4133 /wd4703")
	ENDIF()
ENDFOREACH()
IF(KLAYGE_COMPILER_MSVC)
	string(REPLACE "/WX" "/WX:NO" CMAKE_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS})
ENDIF()

IF(ANDROID OR IOS)
	SET(UNIX OFF)
	SET(LINUX OFF)
ENDIF()

SET(PYTHON_VERSION ${PY_VERSION} CACHE STRING "" FORCE)

set(BUILD_PYTHON_EXECUTABLE OFF CACHE BOOL "" FORCE)
set(BUILD_PYTHON_DEVELOPMENT OFF CACHE BOOL "" FORCE)
set(BUILD_FREEZE_IMPORTLIB OFF CACHE BOOL "" FORCE)
set(BUILD_PGEN OFF CACHE BOOL "" FORCE)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel" CACHE STRING "" FORCE)

set(DOWNLOAD_SOURCES OFF CACHE BOOL "" FORCE)
set(BUILD_LIBPYTHON_SHARED OFF CACHE BOOL "" FORCE)

set(BUILD_EXTENSIONS_AS_BUILTIN ON CACHE BOOL "" FORCE)
set(BUILD_WININST OFF CACHE BOOL "" FORCE)
set(ENABLE_AUDIOOP OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_CN OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_HK OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_ISO2022 OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_JP OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_KR OFF CACHE BOOL "" FORCE)
set(ENABLE_CODECS_TW OFF CACHE BOOL "" FORCE)
set(ENABLE_CTYPES OFF CACHE BOOL "" FORCE)
set(ENABLE_CTYPES_TEST OFF CACHE BOOL "" FORCE)
set(ENABLE_DECIMAL OFF CACHE BOOL "" FORCE)
set(ENABLE_ELEMENTTREE OFF CACHE BOOL "" FORCE)
set(ENABLE_IPV6 OFF CACHE BOOL "" FORCE)
set(ENABLE_LOCALE OFF CACHE BOOL "" FORCE)
set(ENABLE_MMAP OFF CACHE BOOL "" FORCE)
set(ENABLE_MSI OFF CACHE BOOL "" FORCE)
set(ENABLE_MSVCRT OFF CACHE BOOL "" FORCE)
set(ENABLE_MULTIBYTECODEC OFF CACHE BOOL "" FORCE)
set(ENABLE_MULTIPROCESSING OFF CACHE BOOL "" FORCE)
set(ENABLE_OSSAUDIODEV OFF CACHE BOOL "" FORCE)
set(ENABLE_OVERLAPPED OFF CACHE BOOL "" FORCE)
set(ENABLE_PICKLE OFF CACHE BOOL "" FORCE)
set(ENABLE_PYEXPAT OFF CACHE BOOL "" FORCE)
set(ENABLE_SCPROXY OFF CACHE BOOL "" FORCE)
set(ENABLE_SELECT OFF CACHE BOOL "" FORCE)
set(ENABLE_SOCKET OFF CACHE BOOL "" FORCE)
set(ENABLE_SQLITE3 OFF CACHE BOOL "" FORCE)
set(ENABLE_SUBPROCESS OFF CACHE BOOL "" FORCE)
set(ENABLE_TESTCAPI OFF CACHE BOOL "" FORCE)
set(ENABLE_WINAPI OFF CACHE BOOL "" FORCE)
if(KLAYGE_PLATFORM_WINDOWS)
	set(ENABLE_WINREG ON CACHE BOOL "" FORCE)
endif()
set(INSTALL_DEVELOPMENT OFF CACHE BOOL "" FORCE)
set(INSTALL_MANUAL OFF CACHE BOOL "" FORCE)
set(INSTALL_TEST OFF CACHE BOOL "" FORCE)
set(INSTALL_WINDOWS_TRADITIONAL OFF CACHE BOOL "" FORCE)
set(PYTHON_APPLY_PATCHES OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_BZip2 OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_Curses OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_EXPAT OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_DB OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_GDBM OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_OpenSSL OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_READLINE OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_TCL OFF CACHE BOOL "" FORCE)
set(USE_SYSTEM_ZLIB OFF CACHE BOOL "" FORCE)
set(WITH_COMPUTED_GOTOS OFF CACHE BOOL "" FORCE)
set(WITH_DOC_STRINGS OFF CACHE BOOL "" FORCE)
set(WITH_TSC OFF CACHE BOOL "" FORCE)
set(USE_BUILTIN_ZLIB OFF CACHE BOOL "" FORCE)

IF(CMAKE_CROSSCOMPILING)
	STRING(TOLOWER ${CMAKE_SYSTEM_NAME} lc_system_name)
	IF(APPLE)
		SET(PLATFORM_RUN__TRYRUN_OUTPUT "${lc_system_name}")
	ELSE()
		SET(PLATFORM_RUN__TRYRUN_OUTPUT "${CMAKE_SYSTEM_PROCESSOR}-${lc_system_name}")
	ENDIF()
	SET(PLATFORM_RUN "0")

	SET(HAVE_MMAP_DEV_ZERO_EXITCODE 1)
	SET(HAVE_BROKEN_NICE_EXITCODE 1)
	SET(HAVE_BROKEN_POLL_EXITCODE 1)

	SET(DOUBLE_IS_LITTLE_ENDIAN_IEEE754 1)
	SET(DOUBLE_IS_BIG_ENDIAN_IEEE754 0)
	SET(DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754 0)
	SET(X87_DOUBLE_ROUNDING 0)
	SET(POSIX_SEMAPHORES_NOT_ENABLED 0)
	SET(HAVE_BROKEN_SEM_GETVALUE 0)
	SET(HAVE_WORKING_TZSET 0)
	SET(HAVE_ALIGNED_REQUIRED 0)
	SET(HAVE_BROKEN_MBSTOWCS 0)
	SET(HAVE_COMPUTED_GOTOS 0)
	SET(HAVE_GLIBC_MEMMOVE_BUG 0)
	SET(HAVE_LONG_LONG_FORMAT 0)
	SET(HAVE_SIZE_T_FORMAT 0)
ENDIF()

IF(ANDROID OR IOS)
	set(WITH_STATIC_DEPENDENCIES ON)
ENDIF()

ADD_SUBDIRECTORY("${EXTERNAL_PROJECT_DIR}/python-cmake-buildsystem" "${CMAKE_CURRENT_BINARY_DIR}/python")

if(KLAYGE_COMPILER_CLANGCL)
	target_compile_options(libpython-static
		PRIVATE
			-Wno-invalid-token-paste
			-w
			/Od # lld-link can't find __powidf2
	)

	target_compile_definitions(libpython-static
		PRIVATE
			-D_CRT_SECURE_NO_WARNINGS
	)
endif()

target_compile_definitions(libpython-static
	PRIVATE
		-DPy_BUILD_CORE
)
if(KLAYGE_COMPILER_MSVC AND (MSVC_VERSION GREATER 1800))
	target_compile_definitions(libpython-static
		PRIVATE
			-D_CRT_NON_CONFORMING_WCSTOK
	)
endif()
if(KLAYGE_PLATFORM_WINDOWS_STORE)
	target_compile_definitions(libpython-static
		PRIVATE
			-D_WIN32_WINNT=0x0A00
			-DWINVER=0x0A00
			-DNTDDI_VERSION=0x0A000000
	)
endif()

if(KLAYGE_PLATFORM_WINDOWS)
	if(KLAYGE_COMPILER_MSVC OR KLAYGE_COMPILER_CLANGCL)
		set(PYCONFIG_BUILD_DIR ${PYTHON_PROJECT_DIR}/PC)
	else()
		set(PYCONFIG_BUILD_DIR ${EXTERNAL_PROJECT_DIR}/python-cmake-buildsystem/cmake/config-mingw)
	endif()
else()
	set(PYCONFIG_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/python/bin)
endif()
target_include_directories(libpython-static
	PUBLIC
		${PYTHON_PROJECT_DIR}/Include
		${PYCONFIG_BUILD_DIR}
)

SET_TARGET_PROPERTIES(libpython-static PROPERTIES
	ARCHIVE_OUTPUT_DIRECTORY ${PYTHON_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PYTHON_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PYTHON_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PYTHON_OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${PYTHON_OUTPUT_DIR}
	PROJECT_LABEL libpython-static
	DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
	OUTPUT_NAME python${KLAYGE_OUTPUT_SUFFIX}
	FOLDER "${EXTERNAL_VS_FOLDER_PREFIX}/Python"
)

add_dependencies(libpython-static ${KLAYGE_ZLIB_NAME})
