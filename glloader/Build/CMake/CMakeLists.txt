FIND_PACKAGE(PythonInterp)

SET(GLLOADER_PROJECT_DIR "${KLAYGE_ROOT_DIR}/glloader")
SET(GLLOADER_OUTPUT_DIR "${GLLOADER_PROJECT_DIR}/lib/${KLAYGE_PLATFORM_NAME}")

SET(CodeGenOutput "${GLLOADER_PROJECT_DIR}/include/glloader/glloader_gl.h")
ADD_CUSTOM_TARGET(autogen ALL
	COMMAND "${PYTHON_EXECUTABLE}" "${GLLOADER_PROJECT_DIR}/autogen.py" "-q"
	WORKING_DIRECTORY "${GLLOADER_PROJECT_DIR}")
SET_TARGET_PROPERTIES(autogen PROPERTIES FOLDER "glloader")

MACRO(SETUP_GLLOADER LIB_NAME)
	SET(GLLOADER_SOURCE_FILES
		${GLLOADER_PROJECT_DIR}/src/glloader_egl.c
		${GLLOADER_PROJECT_DIR}/src/glloader_gl.c
		${GLLOADER_PROJECT_DIR}/src/glloader_gles.c
		${GLLOADER_PROJECT_DIR}/src/glloader_glx.c
		${GLLOADER_PROJECT_DIR}/src/glloader_wgl.c
		${GLLOADER_PROJECT_DIR}/src/utils.cpp
	)
	SET(GLLOADER_INCLUDE_FILES
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader.h
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader_egl.h
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader_gl.h
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader_gles.h
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader_glx.h
		${GLLOADER_PROJECT_DIR}/include/glloader/glloader_wgl.h
	)
	SET(GLLOADER_HEADER_FILES
		${GLLOADER_PROJECT_DIR}/src/utils.h
	)
	SOURCE_GROUP("Source Files" FILES ${GLLOADER_SOURCE_FILES})
	SOURCE_GROUP("Header Files" FILES ${GLLOADER_HEADER_FILES})
	SOURCE_GROUP("Include Files" FILES ${GLLOADER_INCLUDE_FILES})

	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/src/glloader_egl.c PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/src/glloader_gl.c PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/src/glloader_gles.c PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/src/glloader_glx.c PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/src/glloader_wgl.c PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/include/glloader/glloader_egl.h PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/include/glloader/glloader_gl.h PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/include/glloader/glloader_gles.h PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/include/glloader/glloader_glx.h PROPERTIES GENERATED 1)
	SET_SOURCE_FILES_PROPERTIES(${GLLOADER_PROJECT_DIR}/include/glloader/glloader_wgl.h PROPERTIES GENERATED 1)

	ADD_LIBRARY(${LIB_NAME} ${KLAYGE_PREFERRED_LIB_TYPE}
		${GLLOADER_SOURCE_FILES} ${GLLOADER_HEADER_FILES} ${GLLOADER_INCLUDE_FILES}
	)

	target_compile_definitions(${LIB_NAME}
		PRIVATE
			-DGLLOADER_SOURCE
	)

	if(KLAYGE_COMPILER_CLANGCL)
		target_compile_options(${LIB_NAME}
			PRIVATE
				-Wno-unused-command-line-argument # C compiler doesn't know /std:c++17
		)
	endif()

	target_include_directories(${LIB_NAME}
		PUBLIC
			${GLLOADER_PROJECT_DIR}/include
	)

	SET(LIB_OUTPUT_NAME ${LIB_NAME}${KLAYGE_OUTPUT_SUFFIX})
	SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES
		ARCHIVE_OUTPUT_DIRECTORY ${GLLOADER_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${GLLOADER_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${GLLOADER_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${GLLOADER_OUTPUT_DIR}
		ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${GLLOADER_OUTPUT_DIR}
		RUNTIME_OUTPUT_DIRECTORY ${KLAYGE_BIN_DIR}
		RUNTIME_OUTPUT_DIRECTORY_DEBUG ${KLAYGE_BIN_DIR}
		RUNTIME_OUTPUT_DIRECTORY_RELEASE ${KLAYGE_BIN_DIR}
		RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${KLAYGE_BIN_DIR}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${KLAYGE_BIN_DIR}
		LIBRARY_OUTPUT_DIRECTORY ${KLAYGE_BIN_DIR}
		LIBRARY_OUTPUT_DIRECTORY_DEBUG ${KLAYGE_BIN_DIR}
		LIBRARY_OUTPUT_DIRECTORY_RELEASE ${KLAYGE_BIN_DIR}
		LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${KLAYGE_BIN_DIR}
		LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${KLAYGE_BIN_DIR}
		PROJECT_LABEL ${LIB_NAME}
		DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
		OUTPUT_NAME ${LIB_OUTPUT_NAME}
		FOLDER "glloader"
	)

	ADD_DEPENDENCIES(${LIB_NAME} autogen)

	if(KLAYGE_PLATFORM_DARWIN OR KLAYGE_PLATFORM_IOS)
		find_library(CORE_FOUNDATION CoreFoundation "/")
		target_link_libraries(${LIB_NAME}
			PRIVATE
				${CORE_FOUNDATION}
		)
	else()
		target_link_libraries(${LIB_NAME})
	endif()
ENDMACRO(SETUP_GLLOADER)

ADD_SUBDIRECTORY(glloader)
ADD_SUBDIRECTORY(glloader_es)
