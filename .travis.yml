language: cpp

git:
  depth: 5
  quiet: true

cache:
  directories:
    - Build/${BUILD_DIR}/External
    - Build/${BUILD_DIR}/Ninja
    - External
    - KlayGE/media
    - KlayGE/Samples/media
    - KlayGE/Tests/media
    - KlayGE/Tools/media
    - KlayGE/Tutorials/media

jobs:
  include:
    - os: windows
      env: MATRIX_EVAL="CC=cl.exe && CXX=cl.exe" PROJECT="vs2017" COMPILER="vc141" BUILD_DIR="$COMPILER"

    - os: windows
      before_install:
        - choco install ninja
        # Workaround for CMake not wanting sh.exe on PATH for MinGW
        - export PATH=${PATH%:/c/Program Files/Git/usr/bin}
        - export PATH=/c/ProgramData/chocolatey/bin:$PATH
      env: MATRIX_EVAL="CC=gcc && CXX=g++" PROJECT="ninja" COMPILER="mingw" BUILD_DIR="$COMPILER"

    - os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
            - wine
            - wine-dev
            - winetricks
            - libx11-dev
            - libgl1-mesa-dev
            - libopenal-dev
          update: true
      env: MATRIX_EVAL="CC=gcc-8 && CXX=g++-8" PROJECT="ninja" COMPILER="gcc" BUILD_DIR="$COMPILER"

    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - ninja-build
            - wine32
            - wine-dev
            - winetricks
            - libx11-dev
            - libgl1-mesa-dev
            - libopenal-dev
          update: true
      env: MATRIX_EVAL="CC=gcc-9 && CXX=g++-9" PROJECT="ninja" COMPILER="gcc" BUILD_DIR="$COMPILER"

    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
            - ninja-build
            - wine32
            - wine-dev
            - winetricks
            - libx11-dev
            - libgl1-mesa-dev
            - libopenal-dev
          update: true
      env: MATRIX_EVAL="CC=gcc-10 && CXX=g++-10" PROJECT="ninja" COMPILER="gcc" BUILD_DIR="$COMPILER"

    - os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - llvm-toolchain-xenial-7
          packages:
            - clang-7
            - libc++-7-dev
            - libc++abi-7-dev
            - ninja-build
            - wine
            - wine-dev
            - winetricks
            - libx11-dev
            - libgl1-mesa-dev
            - libopenal-dev
          update: true
      env: MATRIX_EVAL="CC=clang-7 && CXX=clang++-7" PROJECT="ninja" COMPILER="clang" BUILD_DIR="$COMPILER"

    - os: linux
      dist: bionic
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - clang-10
            - libc++-10-dev
            - libc++abi-10-dev
            - ninja-build
            - wine32
            - wine-dev
            - winetricks
            - libx11-dev
            - libgl1-mesa-dev
            - libopenal-dev
          update: true
      env: MATRIX_EVAL="CC=clang-10 && CXX=clang++-10" PROJECT="ninja" COMPILER="clang" BUILD_DIR="$COMPILER"

#    - os: osx
#      osx_image: xcode9.4
#      addons:
#        homebrew:
#          casks:
#            - xquartz
#          packages:
#            - ninja
#          update: true
#      env: MATRIX_EVAL="CC=clang && CXX=clang++" PROJECT="ninja" COMPILER="clang" BUILD_DIR="$COMPILER"

#    - os: osx
#      osx_image: xcode10.1
#      addons:
#        homebrew:
#          casks:
#            - xquartz
#          packages:
#            - ninja
#          update: true
#      env: MATRIX_EVAL="CC=clang && CXX=clang++" PROJECT="ninja" COMPILER="clang" MACOSX_DEPLOYMENT_TARGET="10.14" BUILD_DIR="$COMPILER"

before_install:
  - eval "${MATRIX_EVAL}"
  # Linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export WINEARCH=win32;
      winetricks;
    fi
  # macOS
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install https://raw.githubusercontent.com/sashkab/homebrew-core/b7f9fd6f8c198fe5eacb076aa2c6d41e2203597/Formula/wine.rb;
    fi

script:
  # Restore ninja files
  - if [ "$PROJECT" == "ninja" ]; then
      if [ -d Build/${BUILD_DIR}/Ninja ]; then
        if [ -f Build/${BUILD_DIR}/Ninja/.ninja_deps ]; then
          mv -f Build/${BUILD_DIR}/Ninja/.ninja_* Build/${BUILD_DIR}/;
        fi
      fi
    fi
  - if [ -d Build/${BUILD_DIR}/Ninja ]; then
      rm -rf Build/${BUILD_DIR}/Ninja;
    fi
  # Reset the repo to restore changes in External
  - git reset --hard
  - git config --global user.email "dummy@example.com"
  - git config --global user.name "Dummy Name"
  - python Build.py $PROJECT $COMPILER x64 Release

before_cache:
  # Backup ninja files to a folder
  - mkdir Build/${BUILD_DIR}/Ninja
  - if [ "$PROJECT" == "ninja" ]; then
      mv -f Build/${BUILD_DIR}/.ninja_* Build/${BUILD_DIR}/Ninja;
    fi
